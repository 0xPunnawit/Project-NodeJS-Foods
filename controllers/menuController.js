const db = require("../config/db");

exports.orderSummary = (req, res) => {
  const menuItemId = req.params.menuItemId;
  const selectedOptionName = req.body.menuOption;
  const userId = req.session.user ? req.session.user.id : null;

  if (!userId) {
    return res.status(401).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£" });
  }

  const sql = `
    SELECT 
      mi.name AS menu_name,
      mo.name AS option_name,
      mo.price_adjustment AS price_adjustment,
      mi.price AS base_price,
      mi.restaurant_id AS restaurant_id, 
      r.name AS restaurant_name
    FROM 
      menu_items mi
    INNER JOIN 
      menu_options mo ON mi.menu_item_id = mo.menu_item_id
    INNER JOIN 
      restaurants r ON mi.restaurant_id = r.restaurant_id
    WHERE 
      mi.menu_item_id = ? AND mo.name = ?
  `;

  db.query(sql, [menuItemId, selectedOptionName], (err, results) => {
    if (err) {
      console.error("Error fetching order details:", err);
      return res.status(500).render("error", { title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ" });
    }

    if (results.length === 0) {
      return res.status(404).render("error", { title: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" });
    }

    const selectedItem = results[0];
    const totalPrice = parseFloat(selectedItem.base_price) + parseFloat(selectedItem.price_adjustment);

    // **‡πÄ‡∏ã‡∏ü‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô Session ‡∏Å‡πà‡∏≠‡∏ô Redirect**
    req.session.order = {
      userId,
      menuItemId,
      optionName: selectedItem.option_name,
      totalPrice,
      restaurant: {
        restaurant_id: selectedItem.restaurant_id,
        name: selectedItem.restaurant_name,
      },
    };

    console.log("[SERVER] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô Session:", req.session.order);

    res.render("order-summary", {
      title: "‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
      selectedItem,
      totalPrice,
      restaurantId: selectedItem.restaurant_id,
      restaurant: req.session.order.restaurant, 
    });
  });
};


exports.createOrderSession = (req, res) => {
  const menuItemId = req.params.menuItemId;
  const selectedOptionName = req.body.menuOption;
  const userId = req.session.user ? req.session.user.id : null; // ‡∏î‡∏∂‡∏á user_id ‡∏à‡∏≤‡∏Å session

  if (!userId) {
    return res.status(401).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£" });
  }

  const sql = `
    SELECT 
      mi.name AS menu_name,
      mo.name AS option_name,
      mo.price_adjustment AS price_adjustment,
      mi.price AS base_price,
      mi.restaurant_id AS restaurant_id, 
      r.name AS restaurant_name
    FROM 
      menu_items mi
    INNER JOIN 
      menu_options mo ON mi.menu_item_id = mo.menu_item_id
    INNER JOIN 
      restaurants r ON mi.restaurant_id = r.restaurant_id
    WHERE 
      mi.menu_item_id = ? AND mo.name = ?
  `;

  db.query(sql, [menuItemId, selectedOptionName], (err, results) => {
    if (err) {
      console.error(" Error fetching order details:", err);
      return res.status(500).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ" });
    }

    if (results.length === 0) {
      return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" });
    }

    const selectedItem = results[0];
    const totalPrice = parseFloat(selectedItem.base_price) + parseFloat(selectedItem.price_adjustment);

    //  ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session
    req.session.order = {
      userId,
      menuItemId,
      optionName: selectedItem.option_name,
      totalPrice,
      restaurant: {
        restaurant_id: selectedItem.restaurant_id,
        name: selectedItem.restaurant_name,
      },
    };

    res.json({
      success: true,
      message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô session ‡πÅ‡∏•‡πâ‡∏ß",
      order: req.session.order,
      paymentUrl: `/payment/${selectedItem.restaurant_id}`,
    });
  });
};

exports.updateOrderSession = (req, res) => {
  if (!req.session.order) {
    return res.status(400).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô session" });
  }

  const { quantity, totalPrice, note } = req.body;

  if (!quantity || isNaN(quantity) || !totalPrice || isNaN(totalPrice)) {
    console.error("[SERVER] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", { quantity, totalPrice });
    return res.status(400).json({ success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session
  req.session.order.quantity = parseInt(quantity);  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  req.session.order.totalPrice = parseFloat(totalPrice);
  req.session.order.note = note || "";

  console.log("[SERVER] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", req.session.order);

  res.json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", order: req.session.order });
};


// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π
exports.updateMenu = (req, res) => {
  const { menuId, name, price, availability } = req.body;

  if (!menuId || !name || !price || !availability) {
      return res.status(400).json({ success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
  }

  const sql = "UPDATE menu_items SET name = ?, price = ?, availability = ? WHERE menu_item_id = ?";
  db.query(sql, [name, price, availability, menuId], (err, result) => {
      if (err) {
          console.error("Error updating menu:", err);
          return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π" });
      }
      res.json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  });
};


// ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
exports.getVendorMenus = (req, res) => {
  const accountId = req.session.user.id;

  if (!accountId) {
      return res.redirect("/login");
  }

  const sql = `
      SELECT mi.menu_item_id, mi.name, mi.price, mi.availability
      FROM menu_items mi
      JOIN restaurants r ON mi.restaurant_id = r.restaurant_id
      WHERE r.account_id = ?
  `;

  db.query(sql, [accountId], (err, results) => {
      if (err) {
          return res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π");
      }

      res.render("vendor/manage-menu", { title: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π", menus: results });
  });
};

exports.getMenuOptions = (req, res) => {
  const menuId = req.params.menuId;

  const sqlMenu = "SELECT * FROM menu_items WHERE menu_item_id = ?";
  const sqlOptions = "SELECT * FROM menu_options WHERE menu_item_id = ?";

  db.query(sqlMenu, [menuId], (err, menuResult) => {
      if (err || menuResult.length === 0) {
          return res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ");
      }

      db.query(sqlOptions, [menuId], (err, optionsResult) => {
          if (err) {
              return res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π");
          }

          res.render("vendor/manage-menu-options", {
              title: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π",
              menu: menuResult[0],
              menuOptions: optionsResult
          });
      });
  });
};

// ‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π
exports.deleteMenu = (req, res) => {
  const menuId = req.params.menuId;
  const accountId = req.session.user.id;

  if (!accountId) {
      return res.status(401).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const checkQuery = `
      SELECT mi.menu_item_id 
      FROM menu_items mi 
      JOIN restaurants r ON mi.restaurant_id = r.restaurant_id
      WHERE mi.menu_item_id = ? AND r.account_id = ?
  `;

  db.query(checkQuery, [menuId, accountId], (err, results) => {
      if (err) {
          return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏ô‡∏π" });
      }

      if (results.length === 0) {
          return res.status(403).json({ success: false, message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ" });
      }

      // üî• ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡πà‡∏≠‡∏ô
      const deleteOptionsQuery = "DELETE FROM menu_options WHERE menu_item_id = ?";
      db.query(deleteOptionsQuery, [menuId], (err) => {
          if (err) {
              return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π" });
          }

          // üî• ‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          const deleteMenuQuery = "DELETE FROM menu_items WHERE menu_item_id = ?";
          db.query(deleteMenuQuery, [menuId], (err) => {
              if (err) {
                  return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å" });
              }

              res.json({ success: true, message: "‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
          });
      });
  });
};


// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π
exports.updateMenuOption = (req, res) => {
  const { optionId, name, price, availability } = req.body;

  if (!optionId || !name || !price || !availability) {
      return res.status(400).json({ success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
  }

  const sql = "UPDATE menu_options SET name = ?, price_adjustment = ?, availability = ? WHERE menu_option_id = ?";
  db.query(sql, [name, price, availability, optionId], (err, result) => {
      if (err) {
          return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
      }
      res.json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  });
};

// ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π
exports.deleteMenuOption = (req, res) => {
  const optionId = req.params.optionId;

  const sql = "DELETE FROM menu_options WHERE menu_option_id = ?";
  db.query(sql, [optionId], (err, result) => {
      if (err) {
          return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
      }
      res.json({ success: true, message: "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  });
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π
exports.addMenuOption = (req, res) => {
  const { menuItemId, name, price, availability } = req.body;

  const sql = "INSERT INTO menu_options (menu_item_id, name, price_adjustment, availability) VALUES (?, ?, ?, ?)";
  db.query(sql, [menuItemId, name, price, availability], (err, result) => {
      if (err) {
          return res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
      }
      res.json({ success: true, message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  });
};


